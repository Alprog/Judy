
#pragma once

#include <functional>

class Shader;
class PipelineState;

class PipelineSettings
{
    friend class std::hash<PipelineSettings>;

public:
    PipelineSettings();

    void setVertexShader(Shader* shader);
    void setPixelShader(Shader* shader);

protected:
    Shader* vertexShader;
    Shader* pixelShader;

    PipelineState* pipelineState;
};


template <>
struct std::hash<PipelineSettings>
{
    size_t operator()(const PipelineSettings &ps) const
    {
        size_t h1 = std::hash<Shader*>()(ps.vertexShader);
        size_t h2 = std::hash<Shader*>()(ps.pixelShader);
        return h1 ^ (h2 << 1);
    }
};
